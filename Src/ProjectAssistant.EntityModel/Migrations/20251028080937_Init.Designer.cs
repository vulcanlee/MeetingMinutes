// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectAssistant.EntityModel;

#nullable disable

namespace ProjectAssistant.EntityModel.Migrations
{
    [DbContext(typeof(BackendDBContext))]
    [Migration("20251028080937_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Chinese_Taiwan_Stroke_CI_AS")
                .HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("ProjectAssistant.EntityModel.Models.ChatHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("MeetingId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MeetingId");

                    b.ToTable("ChatHistory");
                });

            modelBuilder.Entity("ProjectAssistant.EntityModel.Models.GanttChart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("GanttChart");
                });

            modelBuilder.Entity("ProjectAssistant.EntityModel.Models.Meeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Participants")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Meeting");
                });

            modelBuilder.Entity("ProjectAssistant.EntityModel.Models.MyTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CompletionPercentage")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("MyTask");
                });

            modelBuilder.Entity("ProjectAssistant.EntityModel.Models.MyUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Salt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("MyUser");
                });

            modelBuilder.Entity("ProjectAssistant.EntityModel.Models.MyUserRoleView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MyUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleViewId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MyUserId");

                    b.HasIndex("RoleViewId");

                    b.ToTable("MyUserRoleView");
                });

            modelBuilder.Entity("ProjectAssistant.EntityModel.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompletionPercentage")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Owner")
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("ProjectAssistant.EntityModel.Models.RecordedMediaFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MeetingId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SaveFileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MeetingId");

                    b.ToTable("RecordedMediaFile");
                });

            modelBuilder.Entity("ProjectAssistant.EntityModel.Models.RoleView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PermissionJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RoleView");
                });

            modelBuilder.Entity("ProjectAssistant.EntityModel.Models.ChatHistory", b =>
                {
                    b.HasOne("ProjectAssistant.EntityModel.Models.Meeting", "Meeting")
                        .WithMany("ChatHistory")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Meeting");
                });

            modelBuilder.Entity("ProjectAssistant.EntityModel.Models.GanttChart", b =>
                {
                    b.HasOne("ProjectAssistant.EntityModel.Models.Project", "Project")
                        .WithOne("GanttChart")
                        .HasForeignKey("ProjectAssistant.EntityModel.Models.GanttChart", "ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectAssistant.EntityModel.Models.Meeting", b =>
                {
                    b.HasOne("ProjectAssistant.EntityModel.Models.Project", "Project")
                        .WithMany("Meeting")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectAssistant.EntityModel.Models.MyTask", b =>
                {
                    b.HasOne("ProjectAssistant.EntityModel.Models.Project", "Project")
                        .WithMany("Task")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectAssistant.EntityModel.Models.MyUserRoleView", b =>
                {
                    b.HasOne("ProjectAssistant.EntityModel.Models.MyUser", "MyUser")
                        .WithMany("MyUserRoleView")
                        .HasForeignKey("MyUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjectAssistant.EntityModel.Models.RoleView", "RoleView")
                        .WithMany("MyUserRoleView")
                        .HasForeignKey("RoleViewId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MyUser");

                    b.Navigation("RoleView");
                });

            modelBuilder.Entity("ProjectAssistant.EntityModel.Models.RecordedMediaFile", b =>
                {
                    b.HasOne("ProjectAssistant.EntityModel.Models.Meeting", "Meeting")
                        .WithMany("RecordedMediaFile")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Meeting");
                });

            modelBuilder.Entity("ProjectAssistant.EntityModel.Models.Meeting", b =>
                {
                    b.Navigation("ChatHistory");

                    b.Navigation("RecordedMediaFile");
                });

            modelBuilder.Entity("ProjectAssistant.EntityModel.Models.MyUser", b =>
                {
                    b.Navigation("MyUserRoleView");
                });

            modelBuilder.Entity("ProjectAssistant.EntityModel.Models.Project", b =>
                {
                    b.Navigation("GanttChart");

                    b.Navigation("Meeting");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("ProjectAssistant.EntityModel.Models.RoleView", b =>
                {
                    b.Navigation("MyUserRoleView");
                });
#pragma warning restore 612, 618
        }
    }
}
