@inject ProjectViewModel ViewModel

<div>
    <div>
        <Table @ref="table"
               TItem="ProjectAdapterModel"
               DataSource="@ViewModel.Datas"
               OnChange=@ViewModel.OnTableChange
               @bind-PageIndex="@ViewModel.PageIndex"
               @bind-PageSize="@ViewModel.PageSize"
               @bind-Total=@ViewModel.Total>
            <TitleTemplate>
                <Flex Justify="FlexJustify.End" Gap="@("10")">
                    <Button Type="ButtonType.Primary" OnClick="() => ViewModel.OnAddNewRecord()">新增</Button>
                </Flex>
            </TitleTemplate>
            <ColumnDefinitions Context="row">
                <Column TData="string" DataIndex="@nameof(ProjectAdapterModel.Name)" Title="名稱" />
            </ColumnDefinitions>
        </Table>
    </div>

    <div>
        <Modal Title=@ViewModel.EditRecordTitle Width="@("70%")"
               Centered="true"
               MaxBodyHeight="@("80vh")"
               Visible="@ViewModel.IsShowEditRecord"
               Closable="false"
               MaskClosable="false"
               OkText="@("確定")"
               OnOk="@ViewModel.OnRecordEditConfirm"
               CancelText="@("取消")" 
               OnCancel="@ViewModel.OnRecordEditCancel">
           
            <ProjectForm ViewModel="ViewModel" />

        </Modal>

    </div>
</div>
<Button OnClick="OnClicked">Default</Button>
<Button Type="ButtonType.Primary" OnClick="OnMessageClicked">Default Message</Button>
<ConfirmModal ViewModel="ConfirmModal" />
<MessageModal ViewModel="MessageModal" />

@code {

    ITable table;

    ConfirmModalModel ConfirmModal = new();
    MessageModalModel MessageModal = new();

    async Task OnClicked()
    {
        ConfirmModal.Title = "測試標題";
        ConfirmModal.Body = "測試內容";
        var result = await ConfirmModal.ShowAsync("確認", "測試標題測試標題測試標題測試內容測試內容測試內容");

    }

    async Task OnMessageClicked()
    {
        MessageModal.Title = "測試測試測試標題";
        MessageModal.Body = "測試內容";
        var result = await MessageModal.ShowAsync("確認 測試", "測試標題測試標題測試標題測試內容測試內容測試內容");

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetDataAsync(firstRender);
        }
    }
    async Task GetDataAsync(bool firstRender = false)
    {
        await ViewModel.GetAllAsync();
        if (firstRender == true)
        {
            StateHasChanged();
        }
    }
}